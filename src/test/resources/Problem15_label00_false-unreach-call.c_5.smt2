(set-info :smt-lib-version 2.6)
(set-logic LIA)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun ~a29~0 () Int)
(assert (not (exists ((v_prenex_81 Int)) (let ((.cse0 (* 4 (div v_prenex_81 5)))) (and (<= 0 (+ .cse0 4)) (<= 0 .cse0) (<= ~a29~0 (+ (mod .cse0 299978) 300021)) (= 0 (mod v_prenex_81 5)))))))
(assert (not (exists ((v_~a29~0_1039 Int)) (let ((.cse1 (* 4 (div v_~a29~0_1039 5)))) (let ((.cse0 (mod .cse1 299978))) (and (= 0 (mod v_~a29~0_1039 5)) (not (= 0 .cse0)) (< .cse1 0) (<= ~a29~0 (+ .cse0 43)) (= (mod (+ .cse1 4) 299978) 0)))))))
(assert (not (exists ((v_prenex_81 Int)) (let ((.cse2 (* 4 (div v_prenex_81 5)))) (let ((.cse1 (+ .cse2 4)) (.cse0 (mod .cse2 299978))) (and (<= ~a29~0 (+ .cse0 300021)) (< .cse1 0) (not (= (mod .cse1 299978) 0)) (= 0 .cse0) (= 0 (mod v_prenex_81 5))))))))
(assert (exists ((v_prenex_81 Int)) (let ((.cse0 (* 4 (div v_prenex_81 5)))) (and (<= 0 (+ .cse0 4)) (<= 0 v_prenex_81) (<= 0 .cse0) (<= ~a29~0 (+ (mod .cse0 299978) 300021))))))
(check-sat)
(exit)
